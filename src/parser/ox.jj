/**

oxdoc (c) Copyright 2005-2009 by Y. Zwols

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

**/

PARSER_BEGIN(Parser)

package oxdoc.parser;

import java.util.*;
import oxdoc.*;
import oxdoc.entities.*;
import oxdoc.comments.*;
import oxdoc.util.Logger;
import oxdoc.util.Logging;

  public class Parser {

	private OxFile file = null;
	private OxProject project = null;
	private Logger logger = Logging.getLogger();
	private OxClass currentClass = null;
	private OxClass.Visibility currentVisibility = OxClass.Visibility.Private;

  	public Parser(java.io.InputStream stream, OxFile file, OxProject project) {
     		this(stream, null);
		this.file = file;
		this.project = project;
  	}

  }

PARSER_END(Parser)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"#"  (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

SPECIAL_TOKEN : {
 <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : {
 <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] >
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  <CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
|  <STRING_LITERAL: "\"" (~["\"","\\","\n","\r"] | "\\" (["a","v","x","n","t","b","r","f","{","}","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
}

TOKEN : {
	<CONTINUE: "continue"> |
	<DECL: "decl"> |
	<DFLT: "default"> |
	<SWITCH: "switch"> |
	<SWITCHSINGLE: "switch_single"> |  /** Token added by C. Ferrall **/
	<RETURN: "return"> |
	<STATIC: "static"> |
	<WHILE: "while"> |
	<NAN: ".NaN"> |
	<INF: ".Inf"> |
	<BREAK: "break"> |
	<GOTO: "goto"> |
	<NEW: "new"> |
	<DELETE: "delete"> |
	<CONST: "const"> |
	<CLASS: "class"> |
	<EXTERN: "extern"> |
	<VIRTUAL: "virtual"> |
	<NAMESPACE: "namespace"> |
	<ELSE: "else"> |
	<CASE: "case"> |
	<ENUM: "enum"> |
	<FOR: "for"> |
	<FOREACH: "foreach"> |
	<PARALLELFOR: "parallel for">|
	<SERIAL: "serial"> |
	<IN: "in"> |
	<IF: "if"> |
	<DO: "do"> |
    <PUBLIC: "public"> | /** Three tokens added by C. Ferrall **/
    <STRUCT: "struct"> |
    <PROTECTED: "protected"> |
	<PRIVATE: "private">
}

TOKEN : {
 <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  <#LETTER: ["$","A"-"Z","_","a"-"z"]>
|  <#DIGIT: ["0"-"9"]>
}

void OxFileDefinition() : {}
{
	{
		/* Try and get the first special token in the file */
		Token t = getToken(1);
		if ((t != null) && t.specialToken != null) {
			Token tmp_t = t.specialToken;
			while (tmp_t.specialToken != null) tmp_t = tmp_t.specialToken;
			if (tmp_t.beginLine == 1)
                            try { file.setComment(tmp_t.image);
                            } catch (Exception E) { throw new ParseException(E.getMessage()); }
		}
	}
/** C. Ferrall changed + to * so that a file with no declarations
    does not generate an error.  For example, a header file with only #includes
    Seemed to fix the problem ... not sure if it has bad side effects
**/
	( NamespaceDeclaration() |
	  NamespaceDefinition() )*
}

void NamespaceDefinition() : {}
{
	( LOOKAHEAD( FunctionDeclaration() ) FunctionDeclaration() |
	  LOOKAHEAD(2)
	  ExternFunctionDeclaration() |
	  LOOKAHEAD( FunctionDefinition() ) FunctionDefinition() |
	  ClassDefinition() |
	  DeclarationStatement() )
}

void NamespaceDeclaration() : {}
{
	<NAMESPACE> <IDENTIFIER> "{" (NamespaceDefinition())* "}"
}

void DeclarationStatement() : {}
{
/** C Ferrall modified this so that an ending ";" is optional for enum's
**/
	[<EXTERN>] FieldDeclaration() | EnumDeclaration()
}

void GlobalVariableDeclaration() :
{
	Token externToken = null,
              staticToken = null,
              constToken = null,
              declToken = null,
              firstToken = null;
        Token name;
        boolean Static = false, Constant = false, Extern = false;
        ArrayList<Token> variableNames = new ArrayList<Token>();
}
{
    [externToken = <EXTERN> { Extern = true; } ]
    [staticToken = <STATIC> { Static = true; } ]
    [constToken = <CONST> { Constant = true; } ]
    declToken = <DECL> name = VariableDeclaration()  { variableNames.add(name); }
		("," name = VariableDeclaration() { variableNames.add(name); } )* ";"
    {
    }
}


void ClassDefinition() :
{ Token name, classtoken, parentclassname = null; }
{
	( classtoken = <STRUCT> { currentVisibility = OxClass.Visibility.Public; } |
      classtoken = <CLASS> { currentVisibility = OxClass.Visibility.Private; }  )
	name = <IDENTIFIER> [ ":" parentclassname = <IDENTIFIER> ]
	{
	  OxClass newClass;
	  if (parentclassname == null)
	  	 newClass = file.addClass(name.image);
	  else
	  	 newClass = file.addClass(name.image, parentclassname.image);
	  if (classtoken.specialToken != null)
              if (classtoken.specialToken.beginLine != 1)
                 try { newClass.setComment(classtoken.specialToken.image);
                 } catch (Exception E) { throw new ParseException(E.getMessage()); }

	  project.addSymbol(newClass);

      currentClass = newClass;
	}
    "{" ClassBody() "}"
    [";"]
    { currentClass = null; }
}

/**  C. Ferrall added EnumDeclaration (now allowed inside class/struct)
**/
void ClassBody() : {}
{
	(
	  ((<PUBLIC> { currentVisibility = OxClass.Visibility.Public; } |
        <PROTECTED> { currentVisibility = OxClass.Visibility.Protected; } |
        <PRIVATE> { currentVisibility = OxClass.Visibility.Private; } ) ":")
      |
      ( LOOKAHEAD(MethodDeclaration()) MethodDeclaration() | FieldDeclaration() | EnumDeclaration()  )
    )*
}

void MethodDeclaration() : { Token name; boolean Virtual = false, Static = false; String methodPrefix = ""; }
{
    [<VIRTUAL> { Virtual = true; } ]
    [<STATIC> { Static = true; } ]
    ["~" { methodPrefix = "~"; } ]
    name = <IDENTIFIER> "(" [ ArgumentList() ] ")" ";"
    {
       OxMethod newMethod = currentClass.addMethod(methodPrefix + name.image);
       newMethod.setVirtual(Virtual);
       newMethod.setStatic(Static);
    }
}

/** C. Ferrall switch STATIC and CONST to the order required by Ox
**/
void FieldDeclaration() :
   {
       Token staticToken = null,
             constToken = null,
             declToken = null,
             firstToken = null;
       Token name;
       boolean Static = false, Constant = false;
       ArrayList variableNames = new ArrayList();
   }
{
    [staticToken = <STATIC> { Static = true; } ]
    [constToken = <CONST> { Constant = true; } ]
    declToken = <DECL> name = VariableDeclaration()  { variableNames.add(name); }
		("," name = VariableDeclaration() { variableNames.add(name); } )* ";"
    {
       if (staticToken != null) firstToken = staticToken;
       if ((constToken != null) && (firstToken == null)) firstToken = constToken;
       if ((declToken != null) && (firstToken == null)) firstToken = declToken;

       String commentNextVariable = null;
       if (firstToken.specialToken != null)
          if (firstToken.specialToken.beginLine != 1)
             commentNextVariable = firstToken.specialToken.image;

       for (Object varName: variableNames)
       {
          OxField newField;
          if (currentClass == null)
             newField = file.addVariable(( (Token) varName).image );
          else
             newField = currentClass.addField(( (Token) varName).image, currentVisibility);
          String comment = "";
          if (( (Token) varName).specialToken != null)
             comment = ((Token) varName).specialToken.image;
          else if (commentNextVariable != null)
             comment = commentNextVariable;

          try {
             newField.setComment(comment);
             newField.setStatic(Static);
             newField.setConstant(Constant);
             project.addSymbol(newField);
             commentNextVariable = null;
          } catch (Exception E)
          {
             throw new ParseException(E.getMessage());
          }
       }
    }
}

/** C. Ferrall added the optional ";"
    And added option of = integer, created EnumElement
**/
Token EnumElement() : { Token name; }
{
  name = <IDENTIFIER> ["=" AssignmentExpression() ]
  { return name; }
}

void EnumDeclaration() : { ArrayList<String> elements = new ArrayList<String>(); Token enumToken, el; }
{
	enumToken = <ENUM>
    "{"
    el = EnumElement() { elements.add(el.image); }
    ("," el = EnumElement() { elements.add(el.image); } )*
    "}" [";"]
    {
       String comment = null;
       String alternativeName = null;
       if (enumToken.specialToken != null)
          if (enumToken.specialToken.beginLine != 1)
          {
             comment = enumToken.specialToken.image;
             // trick to obtain alternative name
             EnumComment ec = new EnumComment(project);
             try { ec.setText(comment); }
             catch ( Exception E ) { throw new ParseException(E.getMessage()); }
             alternativeName = ec.alternativeName();
             if (alternativeName.trim().length() == 0)
                alternativeName = null;
          }

       OxEnum newEnum = null;
       if (currentClass == null)
          newEnum = file.addEnum(alternativeName, elements);
       else
          newEnum = currentClass.addEnum(alternativeName, elements, currentVisibility);

       if (comment != null)
          try { newEnum.setComment(comment);
          } catch (Exception E) { throw new ParseException(E.getMessage()); }

       if (alternativeName != null)
          project.addSymbol(newEnum);
       project.addSymbolEnumElements(newEnum);
    }
}

void ExternFunctionDeclaration() : {}
{
	<EXTERN> [<STRING_LITERAL>] <IDENTIFIER> "(" [ ArgumentList() ] ")"  ";"
}

void FunctionDeclaration() :{}
{
	[<STATIC>]
	(
	  LOOKAHEAD(4)
	  <IDENTIFIER> ("::") ["~" ] <IDENTIFIER>
|	  <IDENTIFIER>
	)
    "(" [ ArgumentList() ] ")"  ";"
}

void FunctionDefinition() :
{ Token name, classname, t1 = getToken(1), t2;
  String methodPrefix = "";
  OxMethod func;}
{
	[<STATIC>]
	(
	  LOOKAHEAD(4)
	  classname = <IDENTIFIER> ("::") ["~" { methodPrefix = "~"; } ] name = <IDENTIFIER>
	  {
		 String methodName = methodPrefix + name.image;

	  	 OxClass oxClass = file.getClass(classname.image);
		 if (oxClass == null) {
		    logger.warning("Definition of method " + methodName + " of class " + classname.image + ": class " + classname.image + " is not defined yet.");
			oxClass = file.addClass(classname.image);
		 }
	     OxMethod newMethod = oxClass.getMethodByName(methodName);
         if (newMethod == null) {
		    logger.warning("Definition of method " + methodName + " of class " + classname.image + ": method is not declared yet.");
			newMethod = oxClass.addMethod(methodName);
         }
	     if (classname.specialToken != null)
            if (classname.specialToken.beginLine != 1)
                 try { newMethod.setComment(classname.specialToken.image); }
                 catch (Exception E) { throw new ParseException(E.getMessage()); }

		 project.addSymbol(newMethod);
		 func = newMethod;
	  }
|	  name = <IDENTIFIER>
	  {
	  	 OxMethod newFunction = file.addFunction(name.image);
	     if (name.specialToken != null)
            if (name.specialToken.beginLine != 1)
                 try { newFunction.setComment(name.specialToken.image); }
                 catch (Exception E) { throw new ParseException(E.getMessage()); }
		 project.addSymbol(newFunction);
		 func = newFunction;
	  }
	)
    "(" [ ArgumentList() ] ")"
	{
	  t2 = getToken(0);

	  StringBuilder declaration = new StringBuilder();
	  for(; t1 != t2; t1 = t1.next) {
	  	declaration.append(t1.image.trim());
	    declaration.append(" ");
	  }
	  declaration.append(t2.image.trim());
	  func.setDeclaration(declaration.toString());
	}
	CompoundStatement()
}

void ArgumentList() : {}
{
	"..." [<IDENTIFIER>] |
	[<CONST>] <IDENTIFIER> [ "=" Expression() ] [ "," ArgumentList() ]
}

void CompoundStatement() : {}
{
	"{"
		(Statement())*
	"}"
}

void SimpleStatement() : {}
{
	LOOKAHEAD(3)
      DeclarationInFunction() |
	  AssignmentExpression() ("," AssignmentExpression())* |
	  JumpStatement()
}

void Label() : {}
{
    ":" <IDENTIFIER>
}

void Statement() : {}
{
  	LOOKAHEAD(CompoundStatement()) CompoundStatement()
|   Label()
|	LOOKAHEAD(SimpleStatement()) SimpleStatement() ";"
|	IterationStatement()
|	SelectionStatement()
}

void JumpStatement() : {}
{
	(
      <CONTINUE>  |
      <GOTO> <IDENTIFIER> |
	  <BREAK>  |
		  <RETURN> [ Expression() ]  )
}

Token VariableDeclaration() : { Token name; }
{
	name = <IDENTIFIER> [ "=" AssignmentExpression() ]
	{ return name; }
}


void DeclarationInFunction() : {}
{
	[<SERIAL>] <DECL> VariableDeclaration() ("," VariableDeclaration())*
}

/** Added by C. Ferrall to parse switches, generalized to allow for character and strings
**/
void CaseStatement() : {}
{
    <CASE> [( "+" | "-" )] (<INTEGER_LITERAL> | <CHARACTER_LITERAL> | <STRING_LITERAL> |<IDENTIFIER>)
            ":" (Statement())*
}

void DfltStatement() : {}
{
    <DFLT> ":" (Statement())*
}

/** Modified by C. Ferrall to handle cases and switch_single
**/
void SelectionStatement() : {}
{
	( <IF> "(" Expression() ")" Statement() [ LOOKAHEAD(2) <ELSE> Statement() ] |
	  <SWITCH> "(" Expression() ")"
                "{" (CaseStatement() | DfltStatement())* "}" |
	  <SWITCHSINGLE> "(" Expression() ")"
                "{" (CaseStatement() | DfltStatement())* "}"  )
}

void IterationStatement() : {}
{
	( <WHILE> "(" Expression() ")" Statement() |
	  <DO> Statement() <WHILE> "(" Expression() ")" ";" |
	  <FOREACH> "(" SimpleStatement() <IN> Expression() ")" |
	  <FOR> "("
	  		[ SimpleStatement() ]
	  		";"
	  		[ Expression() ]
			";"
	  		[ SimpleStatement() ]
		")" Statement() |
		<PARALLELFOR> "("
	  		[ SimpleStatement() ]
	  		";"
	  		[ Expression() ]
			";"
	  		[ SimpleStatement() ]
		")" Statement() )
}

void Expression() : {}
{
  AssignmentExpression()
}

void AssignmentExpression() : {}
{
    "[=]" "(" [ ArgumentList() ] ")" CompoundStatement() |
	  "[" UnaryExpression() ("," UnaryExpression())* "]" "=" AssignmentExpression() |
	  LOOKAHEAD(UnaryExpression() AssignmentOperator()) UnaryExpression() AssignmentOperator() AssignmentExpression() |
	  LOOKAHEAD(3) ConditionalExpression()
}

void AssignmentOperator() : {}
{
	( "=" | "*=" | "/=" | "+=" | "-=" | "~=" | "|=" | ".*=" | "./=" )
}

void ConditionalExpression() : {}
{
	LogicalORExpression()
		[ "?" AssignmentExpression()  ":" ConditionalExpression() |
		 ".?" AssignmentExpression() ".:" ConditionalExpression() ]
}

void LogicalORExpression() : {}
{
	LogicalDOTORExpression() [ "||" LogicalORExpression() ]
}

void LogicalDOTORExpression() : {}
{
	LogicalANDExpression() [ ".||" LogicalDOTORExpression() ]
}

void LogicalANDExpression() : {}
{
	LogicalDOTANDExpression() [ "&&" LogicalANDExpression() ]
}

void LogicalDOTANDExpression() : {}
{
	EqualityExpression() [ ".&&" LogicalDOTANDExpression() ]
}

void EqualityExpression() : {}
{
	RelationalExpression() [ ( "==" | "!=" | ".==" | ".!=" ) EqualityExpression() ]
}

void RelationalExpression() : {}
{
	VerticalConcatenationExpression() [ ( "<" | ">" | "<=" | ">=" | ".<" | ".>" | ".<=" | ".>=" ) RelationalExpression() ]
}

void VerticalConcatenationExpression() : {}
{
	HorizontalConcatenationExpression() [ "|" VerticalConcatenationExpression() ]
}

void HorizontalConcatenationExpression() : {}
{
	AdditiveExpression() [ "~" HorizontalConcatenationExpression() ]
}

void AdditiveExpression() : {}
{
	MultiplicativeExpression() [ ( "+" | "-" ) AdditiveExpression() ]
}

void MultiplicativeExpression() : {}
{
	UnaryExpression() [ ( "**" | "*" | "/" | ".*" | "./" ) MultiplicativeExpression() ]
}

void UnaryExpression() : {}
{
	( LOOKAHEAD(3) PowerExpression() |
	  UnaryOperator() UnaryExpression()
	)
}

void UnaryOperator() : {}
{
	( "::" | "++" | "--" | "&" | "+" | "-" | "!" | "~" | <NEW> | <DELETE> )
}

void PowerExpression() : {}
{
	PostfixExpression() [ (  "^" | ".^" ) PowerExpression() ]
}

void PostfixExpression() : {}
{
	PrimaryExpression()  ( "[" [ RangeExpression() ] "]" |
	                      "(" [ LOOKAHEAD(ArgumentExpressionList() ) ArgumentExpressionList() ] ")" |
	  					  "." <IDENTIFIER> |
						  LOOKAHEAD(3) "->" <IDENTIFIER> "::" <IDENTIFIER> |
	  					  "->" <IDENTIFIER> |
	  					  "++" |
						  "'" [<IDENTIFIER>] |
	  					  "--" )*
}

void RangeExpression() : {}
{
	ConditionalExpression() [ ":" [ ConditionalExpression() ] ] |
	":" [ConditionalExpression() ]
}

void PrimaryExpression() : {}
{
	( LOOKAHEAD(2) <IDENTIFIER> "::" <IDENTIFIER> |
	  <IDENTIFIER> |
	  Constant() |
      "(" Expression() ")" )
}

void ArgumentExpressionList() : {}
{
	AssignmentExpression() ( "," AssignmentExpression() )*
}

void MatrixConstantElement() : {}
{
	"[" Constant() "]" "*" Constant() |
	LOOKAHEAD(3) Constant() ":" [ "[" Constant() "]" ] Constant() |
	Constant() |
	<IDENTIFIER>
}

void MatrixConstant() : {}
{
	"<" [MatrixConstantElement() ( [","|";"] MatrixConstantElement() )*] ">"
}

void ArrayConstant() : {}
{
	"{" [ Expression() ( "," Expression() )* ] "}"
}

void Constant() : {}
{
 LOOKAHEAD(2) ["+"|"-"] <FLOATING_POINT_LITERAL> | LOOKAHEAD(2) ["+"|"-"]  <INTEGER_LITERAL> |
 <CHARACTER_LITERAL> |
 <STRING_LITERAL> (LOOKAHEAD(1) <STRING_LITERAL>)* | MatrixConstant() | ArrayConstant()	| "." | LOOKAHEAD(2) ["+"|"-"] <INF> | <NAN>
}
