/**

 oxdoc (c) Copyright 2005-2023 by Y. Zwols

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

 **/

package oxdoc;

import oxdoc.html.Header;
import oxdoc.html.RenderContext;

import java.io.*;
import java.nio.file.Files;
import java.text.MessageFormat;

import static oxdoc.util.FileUtils.joinPath;
import static oxdoc.util.FileUtils.toUnixFileName;
import static oxdoc.util.Utils.checkNotNull;

public class OutputFile {
  private final RenderContext renderContext;
  private final Config config;
  private final String fileName;
  private final FileManager fileManager;
  private final StringBuilder content = new StringBuilder(); // main content
  private final StringBuilder css = new StringBuilder(); // extra css style
  private final Icon icon;
  private final String title;

  private class ExtBufferedWriter extends BufferedWriter {
    ExtBufferedWriter(Writer out) {
      super(out);
    }

    void writeln(Object s) throws IOException {
      write(s.toString());
      newLine();
    }
  }

  // create an HTML file
  public OutputFile(String fileName, String title, Icon icon, Config config, FileManager fileManager) throws IOException {
    this.config = checkNotNull(config);
    this.title = checkNotNull(title);
    this.icon = checkNotNull(icon);
    this.fileName = checkNotNull(fileName);
    this.fileManager = checkNotNull(fileManager);
    this.renderContext = new RenderContext(fileManager);
  }

  public void close() throws IOException {
    File aFile = new File(fileManager.getOutputFilename(fileName).trim());
    aFile.getParentFile().mkdirs();
    ExtBufferedWriter output = new ExtBufferedWriter(new FileWriter(aFile));

    writeDocHeader(output);
    output.write(content.toString());
    writeDocFooter(output);
    output.close();
  }

  public void write(Object s) {
    content.append(s.toString());
  }

  public void writeln(Object s) {
    content.append(s.toString());
    content.append("\n");
  }

  public void append_css(Object s) {
    css.append(s.toString());
    css.append("\n");
  }

  private void writeDocHeader(ExtBufferedWriter output) throws IOException {
    output.writeln("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    // writeln("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">");
    output.writeln("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">");
    output.writeln("<head>");
    if (css.length() > 0) {
      output.writeln("<style type=\"text/css\">");
      output.writeln(css.toString());
      output.writeln("</style>");
    }

    if (config.getJavascriptFile() != null) {
	String javascript = new String(Files.readAllBytes(config.getJavascriptFile()));
	output.writeln("<script type='text/javascript'>");
	output.writeln(javascript);
	output.writeln("</script>");
    }

    output.writeln("<link rel=\"stylesheet\" type=\"text/css\" href=\"" +
        toUnixFileName(joinPath(config.getCssPath(), config.getCssFilename())) + "\">");
    output.writeln("<link rel=\"stylesheet\" type=\"text/css\" media=\"print\" href=\"print.css\">");
    output.writeln(config.getMathProcessor().getExtraHeader());
    output.writeln("<title>" + title
        + ((config.getWindowTitle().length() > 0) ? " - " + config.getWindowTitle() : "") + "</title>");
    output.writeln("</head>");
    output.writeln("<body>");
    output.writeln("<div class=\"header\">");
    output.write("[ ");
    if (config.isUpLevel()) {
      output.writeln(fileManager.getSmallIconHtml(Icon.UPLEVEL)
          + "<a href=\"..\\default.html\">Up Level</a> |");
    }
    /** Added by CF **/

    output.writeln(fileManager.getSmallIconHtml(Icon.PROJECT) + "<a href=\"default.html\">Project home</a>");
    output.writeln(" | " + fileManager.getSmallIconHtml(Icon.INDEX) + "<a href=\"index.html\">Index</a>");
    output.writeln(" | " + fileManager.getSmallIconHtml(Icon.HIERARCHY)
        + "<a href=\"hierarchy.html\">Class hierarchy</a> ]</div>");

    Header h1 = new Header(1, icon, title, renderContext);
    output.writeln(h1);
  }

  private void writeDocFooter(ExtBufferedWriter output) throws IOException {
    Object[] args = {OxDoc.PRODUCT_NAME, OxDoc.VERSION, OxDoc.URL};

    output.writeln("<div class=\"footer\">");
    output.writeln(MessageFormat.format(
        "Generated by <a href=\"{2}\">{0} {1}</a> &copy Copyright 2005-2023 by Y. Zwols<br>", args));
    output.writeln(config.getMathProcessor().getExtraFooter());
    output.writeln("</div>");
  }
}
